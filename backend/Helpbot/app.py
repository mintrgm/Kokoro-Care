import re
import pickle
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from sqlalchemy import create_engine, Column, Integer, String, DateTime, Text
from sqlalchemy.orm import declarative_base, sessionmaker
from datetime import datetime
from difflib import get_close_matches

def clean_text(text: str) -> str:
    """
    Lowercases, removes punctuation, emojis, and extra spaces for robust intent recognition.
    """
    text = text.lower()
    text = re.sub(r'[^\w\s]', '', text)
    text = re.sub(r'[^\x00-\x7F]+', '', text)  
    text = re.sub(r'\s+', ' ', text).strip()  
    return text

with open("helpbot_model.pkl", "rb") as f:
    model_pipeline = pickle.load(f)

DATABASE_URL = "sqlite:///./chatlogs.db"
engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(bind=engine)
Base = declarative_base()

class ChatLog(Base):
    __tablename__ = "chat_logs"
    id = Column(Integer, primary_key=True, index=True)
    user_message = Column(Text, nullable=False)
    bot_response = Column(Text, nullable=False)
    intent = Column(String(50), nullable=False)
    timestamp = Column(DateTime, default=datetime.utcnow)

Base.metadata.create_all(bind=engine)

app = FastAPI(title="HelpBot API")
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

class HelpBotRequest(BaseModel):
    text: str

response_map = {
    "greeting": (
        "Hello! I'm here to assist you. You can ask about creating an account, "
        "booking appointments, online payments, video calls, and more."
    ),
    "create_account": (
        "To create an account, click 'Create Account' on the navbar. Fill in your full name, "
        "email, and password, then submit. Then log in using your email and password."
    ),
    "login": "Enter your email and password on the login page, then click 'Login' to access your account.",
    "booking": (
        "To book an appointment: go to 'All Doctors', filter by specialist if needed, pick a doctor, "
        "select a day and time, and click 'Book Appointment'. Choose online (video) or in-person in the popup."
    ),
    "online_payment": (
        "To pay online, go to 'My Appointments', find your doctor, and click 'Pay Online'. "
        "Follow the prompts to complete the payment securely."
    ),
    "video_call": (
        "For online appointments, go to 'My Appointments' and click 'Video Call' next to your appointment "
        "to join. The link is generated by the admin."
    ),
    "edit_profile": (
        "Go to 'My Profile' and click 'Edit' to update your photo, name, email, phone number, addresses, "
        "gender, and birthday."
    ),
    "change_password": "Click 'Change Password' in your profile to update your password safely.",
    "talk_medical_bot": (
        "For medical questions, chat with Baymax, our medical bot. "
        "Baymax can guide you and answer health-related queries."
    ),
    "cancel_appointment": (
        "To cancel or reschedule, go to 'My Appointments' and select the appointment to modify."
    ),
    "about_app": (
        "This app lets you create an account, book appointments, pay online, join video calls, "
        "chat with Baymax, and manage your profile."
    ),
    "services": (
        "You can book online or in-person appointments, pay online, use Baymax for medical guidance, "
        "and edit your profile anytime."
    ),
    "thanks": "You're welcome! If you need anything else, just ask.",
    "goodbye": "Goodbye! Stay healthy and take care.",
    "unknown": "I'm not sure I understand. Could you ask in a different way?"
}

keyword_mapping = {
    "greeting": ["hi", "hello", "hey", "good morning", "good evening"],
    "create_account": ["create account", "sign up", "register"],
    "login": ["login", "sign in"],
    "booking": ["book", "appointment", "doctor", "schedule"],
    "online_payment": ["pay", "payment", "stripe"],
    "video_call": ["video call", "online session", "join call"],
    "edit_profile": ["edit profile", "update profile", "change info"],
    "change_password": ["change password", "forgot password"],
    "talk_medical_bot": ["baymax", "medical help", "health"],
    "cancel_appointment": ["cancel", "reschedule", "modify appointment"],
    "services": ["service", "services", "feature", "features", "what can I do"],
}

def detect_intent(user_text: str) -> str:
    clean_input = clean_text(user_text)

    for intent, keywords in keyword_mapping.items():
        matches = get_close_matches(clean_input, keywords, cutoff=0.6)
        if matches:
            return intent

    if any(word in clean_input for word in ["teacher", "school"]):
        return "unknown"

    return model_pipeline.predict([clean_input])[0]

@app.post("/helpbot")
async def helpbot_endpoint(data: HelpBotRequest):
    user_text = data.text
    intent_pred = detect_intent(user_text)
    bot_response = response_map.get(intent_pred, response_map["unknown"])

    db = SessionLocal()
    chat_log = ChatLog(
        user_message=user_text,
        bot_response=bot_response,
        intent=intent_pred
    )
    db.add(chat_log)
    db.commit()
    db.close()

    return {"response": bot_response, "intent": intent_pred}

@app.get("/")
def home():
    return {"message": "HelpBot is running"}
