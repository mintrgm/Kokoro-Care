import re
import pickle
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from sqlalchemy import create_engine, Column, Integer, String, DateTime, Text
from sqlalchemy.orm import declarative_base, sessionmaker
from datetime import datetime
import pandas as pd
from sklearn.metrics import accuracy_score

def clean_text(text: str) -> str:
    """Lowercase, remove punctuation, emojis, extra spaces"""
    text = text.lower()
    text = re.sub(r'[^\w\s]', '', text)
    text = re.sub(r'\s+', ' ', text).strip()
    return text

with open("helpbot_model.pkl", "rb") as f:
    model_pipeline = pickle.load(f)

DATABASE_URL = "sqlite:///./chatlogs.db"
engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(bind=engine)
Base = declarative_base()

class ChatLog(Base):
    __tablename__ = "chat_logs"
    id = Column(Integer, primary_key=True, index=True)
    user_message = Column(Text, nullable=False)
    bot_response = Column(Text, nullable=False)
    intent = Column(String(50), nullable=False)
    timestamp = Column(DateTime, default=datetime.utcnow)

class AccuracyLog(Base):
    __tablename__ = "accuracy_logs"
    id = Column(Integer, primary_key=True, index=True)
    accuracy = Column(String(20), nullable=False)
    timestamp = Column(DateTime, default=datetime.utcnow)

Base.metadata.create_all(bind=engine)

app = FastAPI(title="HelpBot API")
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

class HelpBotRequest(BaseModel):
    text: str

response_map = {
    "greeting": "Hello! I'm here to assist you. You can ask about creating an account, booking appointments, online payments, video calls, and more.",
    "create_account": "To create an account, click 'Create Account' on the navbar. Fill in your full name, email, and password, then submit. Then log in using your email and password.",
    "login": "Enter your email and password on the login page, then click 'Login' to access your account.",
    "booking": "To book an appointment: go to 'All Doctors', pick a doctor, select day/time, and click 'Book Appointment'. Choose online (video) or in-person in the popup.",
    "online_payment": "To pay online, go to 'My Appointments', find your doctor, and click 'Pay Online'. Follow the prompts to complete the payment securely.",
    "video_call": "For online appointments, click 'Video Call' next to your appointment in 'My Appointments'. The link is generated by the admin.",
    "edit_profile": "Go to 'My Profile' and click 'Edit' to update your photo, name, email, phone number, addresses, gender, and birthday.",
    "change_password": "Click 'Change Password' in your profile to update your password safely.",
    "talk_medical_bot": "For medical questions, chat with Baymax, our medical bot. Baymax can guide you and answer health-related queries.",
    "cancel_appointment": "To cancel or reschedule, go to 'My Appointments' and select the appointment to modify.",
    "about_app": "This app lets you create an account, book appointments, pay online, join video calls, chat with Baymax, and manage your profile.",
    "services": "You can book online or in-person appointments, pay online, use Baymax for medical guidance, and edit your profile anytime.",
    "thanks": "You're welcome! If you need anything else, just ask.",
    "goodbye": "Goodbye! Stay healthy and take care.",
    "unknown": "I'm not sure I understand. Could you ask in a different way?"
}


keyword_mapping = {
    "greeting": [
        "hi","hello","hey","good morning","good evening","yo","hiya","howdy","greetings",
        "sup","heya","morning","evening","hi there","hello there","hey there","hiya friend",
        "hey buddy","good day","greetings friend","hello buddy","hi buddy","hello friend",
        "hey hi","greetings buddy","morning hi","evening hello"
    ],
    "create_account": [
        "create account","sign up","register","i want to register","make account",
        "open account","signup","i need to create an account","register me","sign me up",
        "create new account","start account","join now","register now","account creation",
        "register account","create my account","new account","setup account","open my account",
        "account signup","sign me up now","create user account","join account","account registration"
    ],
    "login": [
        "login","sign in","log me in","enter credentials","i want to login","sign me in",
        "log into account","access account","login page","log in now","signin","enter account",
        "get access","log me on","open account session","login now","access my account",
        "enter login","sign in now","account login","authenticate","login user","login access"
    ],
    "booking": [
        "book","appointment","doctor","schedule","consult","reserve","meet doctor",
        "set appointment","see doctor","book a doctor","i want to book a doctor",
        "make appointment","get appointment","arrange appointment","appointment online",
        "appointment in-person","doctor consultation","online appointment","visit doctor",
        "schedule visit","doctor booking","set doctor","doctor meet","reserve slot",
        "book visit","consultation","doctor online","visit hospital","book consultation",
        "doctor slot","doctor session","online doctor","hospital booking","book hospital",
        "reserve doctor","doctor appointment","doctor visit","book my doctor","doctor checkup"
    ],
    "online_payment": [
        "pay","payment","stripe","pay online","make payment","complete payment",
        "pay doctor","payment options","online payment","checkout","billing",
        "pay for appointment","payment link","process payment","transaction","pay now",
        "online checkout","pay fee","settle payment","invoice payment","online transaction",
        "pay via stripe","stripe payment","complete transaction","payment gateway","pay online now",
        "process payment online","payment procedure","make online payment","secure payment","payment portal"
    ],
    "video_call": [
        "video call","online session","meeting","join call","zoom","call link",
        "online appointment","video session","start video","join meeting","online consult",
        "video consult","connect online","join doctor call","start online call","doctor video",
        "video consultation","join session","teleconsult","video appointment","doctor session",
        "online doctor call","connect with doctor","join video","video connect","doctor teleconsult"
    ],
    "edit_profile": [
        "edit profile","update profile","change info","profile settings","update info",
        "change profile","modify profile","edit my account","update my details",
        "change my info","update personal info","profile edit","modify account","edit account info",
        "profile update","update my profile","change my profile","account edit","update account",
        "modify my profile","edit personal info","edit profile info","update user info","profile modification"
    ],
    "change_password": [
        "change password","forgot password","reset password","update password",
        "password change","modify password","lost password","recover password",
        "password reset","update my password","change my password","reset my password",
        "forgotten password","password recovery","password update","update login password",
        "change login password","reset login password","modify login password","lost login credentials",
        "recover login password"
    ],
    "talk_medical_bot": [
        "baymax","medical help","health","symptom","disease","medicine","doctor help",
        "health query","medical bot","medical question","ask baymax","healthcare advice",
        "illness","check symptoms","disease info","medicine info","healthbot","health assistant",
        "medical guidance","health questions","ask doctor","medical advice","health tips",
        "medical support","healthbot query","consult baymax","health inquiry","ask medical bot",
        "health assistant advice","medical guidance bot","doctor assistant","baymax health","healthbot support"
    ],
    "cancel_appointment": [
        "cancel","reschedule","modify appointment","cancel my appointment",
        "reschedule my appointment","change appointment","appointment change",
        "i want to cancel","i want to reschedule","delete appointment","update appointment",
        "cancel booking","reschedule booking","modify booking","appointment modification",
        "delete booking","change my appointment","appointment update","appointment cancel",
        "modify my appointment","reschedule my slot","cancel my slot","delete my appointment",
        "appointment adjust","update my booking"
    ],
    "services": [
        "service","services","feature","features","what can I do","what does this app offer",
        "app features","available features","appointment features","payment options",
        "booking options","services offered","capabilities","app functionality",
        "help","assist","options","tasks","what can I book","what can I pay",
        "app services","features available","what features","what can I access","available tasks",
        "available services","booking services","payment services","app tasks","app options"
    ],
    "thanks": [
        "thanks","thank you","thx","ty","appreciate it","thank you very much","thanks a lot",
        "thanks buddy","thanks friend","thank you so much","many thanks","thanks a million",
        "thank you kindly","thank you friend"
    ],
    "goodbye": [
        "bye","goodbye","see you","later","cya","talk later","farewell","see ya","good night","good bye",
        "bye bye","catch you later","see you soon","talk to you later","goodnight"
    ]
}

def detect_intent(user_text: str) -> str:
    clean_input = clean_text(user_text)

    for intent, keywords in keyword_mapping.items():
        for kw in keywords:
            if kw in clean_input:
                if intent == "booking" and not ("doctor" in clean_input or "appointment" in clean_input):
                    continue
                return intent

    try:
        probs = model_pipeline.predict_proba([clean_input])[0]
        max_prob = max(probs)
        pred = model_pipeline.classes_[probs.argmax()]
        if max_prob >= 0.7:
            return pred
        else:
            return "unknown"
    except:
        return "unknown"

@app.post("/helpbot")
async def helpbot_endpoint(data: HelpBotRequest):
    user_text = data.text
    intent_pred = detect_intent(user_text)
    bot_response = response_map.get(intent_pred, response_map["unknown"])

    db = SessionLocal()
    chat_log = ChatLog(
        user_message=user_text,
        bot_response=bot_response,
        intent=intent_pred
    )
    db.add(chat_log)
    db.commit()
    db.close()

    return {"response": bot_response, "intent": intent_pred}

@app.get("/helpbot/accuracy")
def get_helpbot_accuracy():
    try:
        df = pd.read_csv("dataset.csv")
        texts = df["text"].tolist()
        true_intents = df["intent"].tolist()
        cleaned_texts = [clean_text(t) for t in texts]
        pred_intents = [detect_intent(t) for t in cleaned_texts]
        acc = accuracy_score(true_intents, pred_intents) * 100
        acc_val = round(acc, 2)

        db = SessionLocal()
        acc_log = AccuracyLog(accuracy=str(acc_val))
        db.add(acc_log)
        db.commit()
        db.close()

        return {"accuracy": acc_val}
    except Exception as e:
        return {"accuracy": 0, "error": str(e)}

@app.get("/")
def home():
    return {"message": "HelpBot is running"}
